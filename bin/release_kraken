#!/usr/bin/env ruby

require 'colorator'
require 'English'
require 'find'
require 'rubygems'

# The following plugins rely on jekyll_plugin_support and should be updated simultanously when breaking changes are introduced.
DEPENDANT_PLUGINS = %w[
  jekyll_all_collections
  jekyll_badge
  jekyll_draft
  jekyll_emoji_tag
  jekyll_flexible_include
  jekyll_google_translate
  jekyll_href
  jekyll_img
  jekyll_plugin_template
  jekyll_outline
  jekyll_pre
  jekyll_qr_generator
  jekyll_quote
  jekyll_reading_time
  jekyll_run
  jekyll_video
].freeze

# @param file must be a fully qualified file name
# @return Gem::Specification of gem that file points into,
# or nil if not called from a gem
def current_spec(file)
  return nil unless File.file?(file)

  searcher = if Gem::Specification.respond_to?(:find)
               Gem::Specification
             elsif Gem.respond_to?(:searcher)
               Gem.searcher.init_gemspecs
             end

  searcher&.find do |spec|
    file.start_with? spec.full_gem_path
  end
end

def find_files(name_pattern = '*', pwd = Dir.pwd)
  files = []
  begin
    Find.find(pwd) do |path|
      Find.prune if path.include?('/.git') || path.include?('/.bundle/') || path.include?('/spec/')
      next unless File.file? path
      next unless /#{name_pattern}/.match?(path)

      files << path
    end
  rescue StandardError => e
    puts e.red
    exit 1
  end
  files
end

# The VSCode ruby debugger does not work for the "gem list" command
def latest_gem_version(gem_name)
  output = `gem list #{gem_name} 2>/dev/null`
  x = output[/\((.*?)\)/m, 1]
  x ? x.split(',').first : 0
end

def check_gem_versions(gemspecs)
  gemspecs.each do |gemspec_file|
    puts gemspec_file.yellow
    spec = current_spec gemspec_file
    puts "spec=#{spec}"
    this_version = spec.version
    dir = File.dirname gemspec_file
    gem_name = File.basename gemspec_file, '.*'
    Dir.chdir(dir) do
      next unless /add_dependency ('|")jekyll_plugin_support('|")/.match?(File.read(gemspec_file))

      puts "Checking #{gem_name} in #{dir}".green

      latest_version = latest_gem_version(gem_name)
      exit 2 unless $CHILD_STATUS.success?
      # puts "The latest version of #{gem_name} is #{latest_version}"

      if latest_version.to_s == '0'
        puts "#{gem_name} has no releases".yellow
      elsif this_version != latest_version
        puts "#{gem_name} has this_version=#{this_version}, latest_version=#{latest_version}".red
      end
    rescue StandardError => e
      puts "\n#{e.message}\n".red
    end
  end
end

def execute(command)
  puts `#{command}`
  return if $CHILD_STATUS.success?

  puts "Error: '#{command}' returned #{$CHILD_STATUS}".red
  exit 1
end

def execute_in_each_project(gemspecs, &block)
  gemspecs.each do |gemspec|
    dir = File.dirname gemspec
    # puts "Entering #{dir}".green
    Dir.chdir dir, &block
  end
end

search_root = ENV.fetch('my_plugins', nil)
unless search_root
  puts 'Error: Environment variable my_plugins is not defined'.red
  exit 1
end

puts 'Finding all Jekyll plugin projects'.green
gemspecs = find_files '.*.gemspec', search_root
puts "#{gemspecs.count} Jekyll plugin projects found.".green

puts "\nChecking for project versions that need to be updated".green
check_gem_versions gemspecs
exit

puts "\nExecuting commands in each project".green
execute_in_each_project gemspecs do
  # puts 'commit and rake release'
  execute 'pwd'
  # execute 'commit'
  # execute 'rake release'
end
